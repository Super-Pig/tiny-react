!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function r(e){return e&&"function"==typeof e.type}function o(e,t,n){var o=null,i=null;!function(e){var t=e.type;return t&&r(e)&&!(t.prototype&&t.prototype.render)}(e)?(o=function(e){var t=new e.type(e.props||{}),n=t.render();return n.component=t,n}(e),i=o.component):o=function(e){return e.type(e.props||{})}(e),c(o,t,n),i&&(i.componentDidMount(),i.props&&i.props.ref&&i.props.ref(i))}function i(e,t,n){var r=t.props||{},o=n&&n.props||{};Object.keys(r).forEach((function(t){var n=r[t],i=o[t];if(n!==i)if("className"===t)e.setAttribute("class",n);else if("on"===t.slice(0,2)){var u=t.slice(2).toLowerCase();e.removeEventListener(u,i),e.addEventListener(u,n)}else"value"===t||"checked"===t?e[t]=n:"children"!==t&&e.setAttribute(t,n)})),Object.keys(o).forEach((function(t){if(!r[t])if("className"===t)e.removeAttribute("class");else if("on"===t.slice(0,2)){var n=t.slice(2).toLowerCase();e.removeEventListener(n,o[t])}else"children"!==t&&e.removeAttribute(t)}))}function u(e){var t=null;return"text"===e.type?t=document.createTextNode(e.props.textContent):i(t=document.createElement(e.type),e),t._virtualDOM=e,e.children.map((function(e){return c(e,t)})),e.props&&e.props.ref&&e.props.ref(t),t}function c(e,t,n){r(e)?o(e,t,n):function(e,t,n){var r=u(e),o=e.component;o&&o.setDOM(r),n?t.replaceChild(r,n):t.appendChild(r)}(e,t,n)}function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,i=[],u=!0,c=!1;try{for(n=n.call(e);!(u=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{u||null==n.return||n.return()}finally{if(c)throw o}}return i}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e){var t=e._virtualDOM;if("text"===t.type)return e.remove();var n=t.component;if(n&&n.componentWillUnmount(),t.props&&t.props.ref&&t.props.ref(null),Object.entries(t.props||{}).forEach((function(t){var n=l(t,2),r=n[0],o=n[1];if("on"===r.slice(0,2)){var i=r.toLowerCase().slice(2);e.removeEventListener(i,o)}})),e.childNodes.length>0)for(var r=0;r<e.childNodes.length;r++)f(e.childNodes[r]),r--;e.remove()}function p(e,t,n,r){!function(e,t){return t&&e.type===t.constructor}(e,t)?c(e,r,n):function(e,t,n,r){var o=t.props,i=t.state;if(t.componentWillReceiveProps(e.props),t.shouldComponentUpdate(e.props,e.state)){t.componentWillUpdate(e.props,e.state),t.updateProps(e.props);var u=t.render();u.component=t,s(u,r,n),t.componentDidUpdate(o,i)}}(e,t,n,r)}function s(e,t,n){var o=n&&n._virtualDOM;if(n){if(r(e))p(e,o.component,n,t);else if(o&&o.type!==e.type&&!r(e)){var l=u(e);n.parentNode.replaceChild(l,n)}else if(o&&o.type===e.type){"text"===e.type?function(e,t,n){e.props.textContent!==t.props.textContent&&(n.textContent=e.props.textContent,n._virtualDOM=e)}(e,o,n):(i(n,e,o),n._virtualDOM=e);for(var a={},d=0,v=n.childNodes.length;d<v;d++){var y=n.childNodes[d];if(1===y.nodeType){var h=y.getAttribute("key");h&&(a[h]=y)}}var m=0===Object.keys(a).length;m?e.children.forEach((function(e,t){s(e,n,n.childNodes[t])})):e.children.forEach((function(e,t){var r=e.props.key;if(r){var o=a[r];o?n.childNodes[t]&&n.childNodes[t]!==o&&n.insertBefore(o,n.childNodes[t]):c(e,n,n.childNodes[t])}}));var b=n.childNodes;if(b.length>e.children.length)if(m)for(var g=b.length-1;g>e.children.length-1;g--)f(b[g]);else for(var O=0;O<b.length;O++){for(var E=b[O],j=E._virtualDOM.props.key,k=!1,w=0;w<e.children.length;w++)if(j===e.children[w].props.key){k=!0;break}k||(f(E),O--)}}}else c(e,t)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}n.r(t);var v={createElement:function e(t,n){for(var r,o=arguments.length,i=new Array(o>2?o-2:0),u=2;u<o;u++)i[u-2]=arguments[u];var c=(r=[]).concat.apply(r,i).reduce((function(t,n){return"boolean"!=typeof n&&null!==n&&(n instanceof Object?t.push(n):t.push(e("text",{textContent:n}))),t}),[]);return{type:t,props:Object.assign({children:c},n),children:c}},render:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.firstChild;s(e,t,n)},Component:function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.props=t}var t,n,r;return t=e,(n=[{key:"setState",value:function(e){this.state=Object.assign({},this.state,e);var t=this.render(),n=this.getDOM();s(t,n.parentNode,n)}},{key:"setDOM",value:function(e){this._dom=e}},{key:"getDOM",value:function(){return this._dom}},{key:"updateProps",value:function(e){this.props=e}},{key:"componentWillMount",value:function(){}},{key:"componentDidMount",value:function(){}},{key:"componentWillReceiveProps",value:function(e){}},{key:"shouldComponentUpdate",value:function(e,t){return e!==this.props&&t!==this.state}},{key:"componentWillUpdate",value:function(e,t){}},{key:"componentDidUpdate",value:function(e,t){}},{key:"componentWillUnmount",value:function(){}}])&&d(t.prototype,n),r&&d(t,r),e}()};function y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,i=[],u=!0,c=!1;try{for(n=n.call(e);!(u=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{u||null==n.return||n.return()}finally{if(c)throw o}}return i}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return h(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var m=[],b=[],g=[],O=0,E=0,j=function(){O=0,E=0,v.render(v.createElement(C,null),document.getElementById("root"))},k=function(e){var t,n=m[O]=m[O]||e,r=b[O]=b[O]||(t=O,function(e){m[t]=e,j()});return O++,[n,r]},w=function(e,t){if("[object Function]"!==Object.prototype.toString.call(e))throw new Error("useEffect 函数的第一个参数必须是函数");if(void 0===t)e();else{if("[object Array]"!==Object.prototype.toString.call(t))throw new Error("useEffect 函数的第二个参数必须是数组");var n=g[E];(!n||!1===t.every((function(e,t){return e===n[t]})))&&e(),g[E++]=t}};function C(){var e=y(k("garry"),2),t=e[0],n=e[1],r=function(e,t){var n=y(k(t),2),r=n[0],o=n[1];return[r,function(t){o(e(r,t))}]}((function(e,t){switch(t.type){case"increment":return e+1;case"decrement":return e-1;default:return e}}),0),o=y(r,2),i=o[0],u=o[1];return w((function(){console.log("mounted")}),[]),w((function(){console.log("hello")}),[t]),w((function(){console.log("world")}),[i]),v.createElement("div",null,v.createElement("p",null,"Count: ",i,v.createElement("button",{onClick:function(){return u({type:"increment"})}},"+1"),v.createElement("button",{onClick:function(){return u({type:"decrement"})}},"-1")),v.createElement("p",null,"Name: ",t," ",v.createElement("button",{onClick:function(){return n("Penggan")}},"change")))}j()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,